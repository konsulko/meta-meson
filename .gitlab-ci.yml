variables:
  IMAGE_TAG: "2019-09-23-1"
  YOCTO_IMAGE: "amlogic-image-headless-initrd"
  MACHINE_NAME: "amlogic-s9xxx"
  IMAGE_NAME: "uImage"
  IMAGE_TYPE: "uimage"
  RAMDISK_COMP: "xz"

stages:
  - docker
  - initrd
  - gen
  - run

build:docker:
  stage: docker
  tags: 
    - yocto
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$IMAGE_TAG && exit 0 || true
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$IMAGE_TAG --tag $CI_REGISTRY_IMAGE:latest scripts/
    - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG
    - docker push $CI_REGISTRY_IMAGE:latest

build:initrd:
  tags: 
    - yocto
  stage: initrd
  image: $CI_REGISTRY_IMAGE:$IMAGE_TAG
  
  before_script:
    - mkdir -p results
    - rm -rf /tmp/build_env
    - git clone git://github.com/openembedded/openembedded-core --branch=warrior --depth=1 /tmp/build_env
    - git clone git://github.com/openembedded/bitbake --branch=1.42 --depth=1 /tmp/build_env/bitbake
    - git clone $(pwd) /tmp/build_env/$(basename $(pwd))

  script:
    - bash scripts/prepare.sh /tmp/build_env
    - bash scripts/build.sh /tmp/build_env $MACHINE_NAME $YOCTO_IMAGE
    - cp -ar /tmp/build_env/build/tmp*/deploy/images/$MACHINE_NAME/* $CI_PROJECT_DIR/results/

  artifacts:
    when: always
    paths:
      - results/

.gen:
  stage: gen
  tags:
    - yocto
  needs: ["build:initrd"]
  dependencies:
    - build:initrd
  image: $CI_REGISTRY_IMAGE:$IMAGE_TAG
  script:
    - python3 scripts/generate_lava.py
        --template scripts/meta-meson.yml.jinja2
        --info "$CI_PIPELINE_URL for $DEVICE_TYPE at $CI_COMMIT_REF_NAME"
        --base-artifacts-url $CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/raw/results
        --device-type ${DEVICE_TYPE}
        --kernel-image-name "`readlink results/${IMAGE_NAME}`"
        --kernel-image-type ${IMAGE_TYPE}
        --dtb-name "`readlink results/${DTB_NAME}`"
        --ramdisk-name "`readlink results/${YOCTO_IMAGE}-${MACHINE_NAME}.cpio.${RAMDISK_COMP}`"
        --ramdisk-compression ${RAMDISK_COMP}
        --boot-method ${BOOT_METHOD}
        --tags "${LAVA_TAGS}"
        > results/meta-meson-$DEVICE_TYPE.yml
  artifacts:
    when: always
    paths:
      - results/

.run:
  stage: run
  image: $CI_REGISTRY_IMAGE:$IMAGE_TAG
  script:
    - lava_job_id=`lavacli jobs submit $CI_PROJECT_DIR/results/meta-meson-$DEVICE_TYPE.yml`
    - echo $lava_job_id
    - lavacli jobs logs $lava_job_id | grep -a -v "{'case':" | tee results/$DEVICE_TYPE.log
    - lavacli jobs show $lava_job_id
    - lavacli results $lava_job_id
    - status=`lavacli jobs show $lava_job_id | grep Finished | wc -l`
    - '[[ "$status" -gt 0 ]]'
  artifacts:
    when: always
    paths:
      - results/

gen:libretech-ac:
  extends: .gen
  variables:
    DEVICE_TYPE: "meson-gxl-s805x-libretech-ac"
    DTB_NAME: "meson-gxl-s805x-libretech-ac.dtb"
    BOOT_METHOD: "u-boot"
    LAVA_TAGS: ""

gen:libretech-cc:
  extends: .gen
  variables:
    DEVICE_TYPE: "meson-gxl-s905x-libretech-cc"
    DTB_NAME: "meson-gxl-s905x-libretech-cc.dtb"
    BOOT_METHOD: "u-boot"
    LAVA_TAGS: ""

gen:hardkernel-odroidc2:
  extends: .gen
  variables:
    DEVICE_TYPE: "meson-gxbb-odroidc2"
    DTB_NAME: "meson-gxbb-odroidc2.dtb"
    BOOT_METHOD: "u-boot"
    LAVA_TAGS: ""

gen:khadas-vim:
  extends: .gen
  variables:
    DEVICE_TYPE: "meson-gxl-s905x-khadas-vim"
    DTB_NAME: "meson-gxl-s905x-khadas-vim.dtb"
    BOOT_METHOD: "u-boot"
    LAVA_TAGS: ""

gen:khadas-vim2:
  extends: .gen
  variables:
    DEVICE_TYPE: "meson-gxm-khadas-vim2"
    DTB_NAME: "meson-gxm-khadas-vim2.dtb"
    BOOT_METHOD: "u-boot"
    LAVA_TAGS: "panfrost"

gen:amlogic-p230:
  extends: .gen
  variables:
    DEVICE_TYPE: "meson-gxl-s905d-p230"
    DTB_NAME: "meson-gxl-s905d-p230.dtb"
    BOOT_METHOD: "u-boot"
    LAVA_TAGS: ""

gen:amlogic-p241:
  extends: .gen
  variables:
    DEVICE_TYPE: "meson-gxl-s805x-p241"
    DTB_NAME: "meson-gxl-s805x-p241.dtb"
    BOOT_METHOD: "u-boot"
    LAVA_TAGS: ""

run:libretech-ac:
  extends: .run
  needs: ["build:initrd", "gen:libretech-ac"]
  dependencies:
    - gen:libretech-ac
  tags:
    - lava-meson-gxl-s805x-libretech-ac
  variables:
    DEVICE_TYPE: "meson-gxl-s805x-libretech-ac"
  allow_failure: true

run:libretech-cc:
  extends: .run
  needs: ["build:initrd", "gen:libretech-cc"]
  dependencies:
    - gen:libretech-cc
  tags:
    - lava-meson-gxl-s905x-libretech-cc
  variables:
    DEVICE_TYPE: "meson-gxl-s905x-libretech-cc"

run:hardkernel-odroidc2:
  extends: .run
  needs: ["build:initrd", "gen:hardkernel-odroidc2"]
  dependencies:
    - gen:hardkernel-odroidc2
  tags:
    - lava-meson-gxbb-odroidc2
  variables:
    DEVICE_TYPE: "meson-gxbb-odroidc2"
  allow_failure: true

run:khadas-vim:
  extends: .run
  needs: ["build:initrd", "gen:khadas-vim"]
  dependencies:
    - gen:khadas-vim
  tags:
    - lava-meson-gxl-s905x-khadas-vim
  variables:
    DEVICE_TYPE: "meson-gxl-s905x-khadas-vim"

run:khadas-vim2:
  extends: .run
  needs: ["build:initrd", "gen:khadas-vim2"]
  dependencies:
    - gen:khadas-vim2
  tags:
    - lava-meson-gxm-khadas-vim2
  variables:
    DEVICE_TYPE: "meson-gxm-khadas-vim2"

run:amlogic-p230:
  extends: .run
  needs: ["build:initrd", "gen:amlogic-p230"]
  dependencies:
    - gen:amlogic-p230
  tags:
    - lava-meson-gxl-s905d-p230
  variables:
    DEVICE_TYPE: "meson-gxl-s905d-p230"
  allow_failure: true

run:amlogic-p241:
  extends: .run
  needs: ["build:initrd", "gen:amlogic-p241"]
  dependencies:
    - gen:amlogic-p241
  tags:
    - lava-meson-gxl-s805x-p241
  variables:
    DEVICE_TYPE: "meson-gxl-s805x-p241"
  allow_failure: true
